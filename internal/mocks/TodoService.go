// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "todo-api-golang/internal/entity"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// TodoService is an autogenerated mock type for the TodoService type
type TodoService struct {
	mock.Mock
}

// CreateTodo provides a mock function with given fields: _a0, ctx
func (_m *TodoService) CreateTodo(_a0 *entity.Todo, ctx context.Context) (*entity.Todo, error) {
	ret := _m.Called(_a0, ctx)

	var r0 *entity.Todo
	if rf, ok := ret.Get(0).(func(*entity.Todo, context.Context) *entity.Todo); ok {
		r0 = rf(_a0, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Todo, context.Context) error); ok {
		r1 = rf(_a0, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodoById provides a mock function with given fields: id, ctx
func (_m *TodoService) GetTodoById(id uuid.UUID, ctx context.Context) (*entity.Todo, error) {
	ret := _m.Called(id, ctx)

	var r0 *entity.Todo
	if rf, ok := ret.Get(0).(func(uuid.UUID, context.Context) *entity.Todo); ok {
		r0 = rf(id, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, context.Context) error); ok {
		r1 = rf(id, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodos provides a mock function with given fields: ctx
func (_m *TodoService) GetTodos(ctx context.Context) ([]entity.Todo, error) {
	ret := _m.Called(ctx)

	var r0 []entity.Todo
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Todo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTodo provides a mock function with given fields: _a0, ctx
func (_m *TodoService) UpdateTodo(_a0 *entity.Todo, ctx context.Context) (*entity.Todo, error) {
	ret := _m.Called(_a0, ctx)

	var r0 *entity.Todo
	if rf, ok := ret.Get(0).(func(*entity.Todo, context.Context) *entity.Todo); ok {
		r0 = rf(_a0, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Todo, context.Context) error); ok {
		r1 = rf(_a0, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTodoService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTodoService creates a new instance of TodoService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTodoService(t mockConstructorTestingTNewTodoService) *TodoService {
	mock := &TodoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
